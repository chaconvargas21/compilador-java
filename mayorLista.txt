clase Compilador{
	publico estatico vacio principal(cadena []args){
		flotante numero1 = 4.0;
		flotante numero2 = 4.0, numero3 = 5;

		entero ent1 = 4;
		ent1++;
		++ent1;
		--ent1;
		ent1--;

		entero numEnte12 = (entero) numero1;

		flotante numero12 = numero1 + numero -3;
		flotante numero12mult = numero1 * numero;

		entero l[] = nuevo entero[3] ; 
		l[0] = 9;
		l[1] = 4;
		l[2] = 1;
	    
	    	entero mayor = l[0] ;
		entero contador = 1;

		mientras (contador < 3){
			si(l[contador] > mayor0){
				mayor = l[contador];
			}
			contador++;
	    	}

		contador = (contador == 2) ? 5 : 3;

	
		si(prueba == 2){
			entero contsinomientras = 3;
			mientras (contador < 3)
			{
			
				si(l[contador] > mayor0 || contsinomientras == contador)
				{
					mayor = l[contador];
					mientras (contador < 3)
					{
					
						si(l[contador] > mayor0 || contsinomientras == contador)
						{
							mayor = l[contador];
						
						}
						contador++;
			    		}
				}
				contador++;
	    		}

			si(l[contador] > mayor0 && contsinomientras == contador)
			{
				mayor = l[contador];
				contador = (contador == 2) ? 5 : 3;
			
			}
			contador++;
		}
		sino{
			entero contsinomientras = 3;
			mientras (contador < 3)
			{
			
				si(l[contador] > mayor0 || contsinomientras == contador)
				{
					mayor = l[contador];
				
				}
				contador++;
	    		}

			si(l[contador] > mayor0 && contsinomientras == contador)
			{
				mayor = l[contador];
				
				continuar;
			}
			contador++;
		}
	

		entero prueba = 0;
		si(prueba == 1)
		{
			mientras (contador < 3)
			{
				si(l[contador] > mayor0)
				{
					mayor = l[contador];
					interrupcion;
				}
				contador++;
	    		}
		}
		sino si(prueba == 2){
			entero contsinomientras = 3;
			mientras (contador < 3)
			{
			
				si(l[contador] > mayor0 || contsinomientras == contador)
				{
					mayor = l[contador];
				}
				contador++;
	    		}

			si(l[contador] > mayor0 && contsinomientras == contador)
			{
				mayor = l[contador];
				si(l[contador] > mayor0 && contsinomientras == contador)
				{
					mayor = l[contador];
					contador = (contador == 2) ? 5 : 3;
				
				}
			}
			contador++;
		}
		sino{
			entero contsinomientras = 3;
			mientras (contador < 3)
			{
			
				si(prueba == 2){

					mayor = l[contador];
	
				}
				sino{
					entero contsinomientras = 3;
					mientras (contador < 3)
					{
						
						si(l[contador] > mayor0 || contsinomientras == contador)
						{
							mayor = l[contador];
							
						}
						contador++;
				    	}
				}
	    		}
		}			
		retornar mayor;
	} 
}
